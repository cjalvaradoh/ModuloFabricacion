@model IEnumerable<caobaModeloFabricacion.Models.Reporte>

@{
    ViewData["Title"] = "Reportes";
    Layout = "_LayoutLogged";
   
}

<link rel="stylesheet" href="~/css/Rsite.css" asp-append-version="true" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<h3 class="mb-2 mt-2 fw-bold ms-4">Reportes</h3>


<!-- Cards-->
<div class="cardBox px-4 mb-3">
    <div class="card">
        <div class="textBox">
            <div class="numbers" id="ordenesEnProceso">0</div>
            <div class="cardName">Ordenes en Proceso</div>
        </div>
        <div class="iconBox">
            <img src="~/spanIconos/obrero.png" alt="obrero" class="icon icon-hover ms-2" width="100" height="100">
        </div>
    </div>


    <div class="card">
        <div class="textBox">
            <div class="numbers" id="ordenesFinalizadas">0</div>
            <div class="cardName">Ordenes finalizadas</div>
        </div>
        <div class="iconBox">
            <img src="~/spanIconos/relojArena.png" alt="reloj" class="icon icon-hover ms-2" width="100" height="100">
        </div>
    </div>

    <div class="card">
        <div class="textBox">
            <div class="numbers" id="indiceRetrasos">0</div>
            <div class="cardName">Indice Retrasos</div>
        </div>
        <div class="iconBox">
            <img src="~/spanIconos/graficaFlecha.png" alt="graficaFlecha" class="icon icon-hover ms-2" width="40" height="40">
        </div>
    </div>

    <div class="card">
        <div class="textBox">
            <div class="numbers" id="ordenesPendientes">0</div>
            <div class="cardName">Ordenes Pendientes</div>
        </div>
        <div class="iconBox">
            <img src="~/spanIconos/pausa.png" alt="pausa" class="icon icon-hover ms-2" width="40" height="40">
        </div>
    </div>
</div>

<!-- Graphs -->
<div class="row px-4">
    <div class="col-md-4">
        <div style="width: 328px; height: 164px; margin-bottom: 0; padding-bottom: 0;" class="mb-3">
            <canvas id="graficoAvance" style="display: block; margin: 0; padding: 0;"></canvas>
        </div>
    </div>
    <div class="col-md-4">
        <div style="width: 328px; height: 164px; margin-bottom: 0; padding-bottom: 0;" class="mb-3">
            <canvas id="graficoEstados" style="display: block; margin: 0; padding: 0;"></canvas>
        </div>
    </div>
    <div class="col-md-4">
        <div style="width: 328px; height: 169px; margin-bottom: 0; padding-bottom: 0;" class="mb-3">
            <canvas id="graficoTiempo" style="display: block; margin: 0; padding: 0;"></canvas>
        </div>
    </div>
</div>

<div class="row align-items-center px-4 mb-3">
        <div class="col-md-9 col-12 mb-2 mb-md-0">
            <div class="input-group w-100">
                <input type="text" class="form-control search-input-reportes" placeholder="Buscar por Número de Órden" id="searchInput" />
            </div>
        </div>
        <div class="col-md-3 col-12 d-flex justify-content-md-end justify-content-start">
        <a href="#" class="generar-new-link" data-bs-toggle="modal" data-bs-target="#generar">
                Generar PDF
                <img src="~/spanIconos/botonGenerarPdf.png" alt="generarPdf" class="icon icon-hover ms-2" width="24" height="24">
            </a>
        </div>
</div>


<div class="px-4">
<div class="tabla-con-fondo table-responsive" style="max-height: 500px; overflow-y: auto;">
    <table class="table table-striped table-hover " style="font-size: 0.9em;">
        <thead class="table-light sticky-top">
            <tr>
                <th scope="col">Fecha</th>
                <th scope="col">Orden</th>
                <th scope="col">Cantidad</th>
                <th scope="col">Tiempo</th>
                <th scope="col">Estado</th>
                <th scope="col">CRUD</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="reporte"
                    data-id-orden="@item.OrdenId"
                    data-id-reporte="@item.ReporteId"
                    data-id-producto="@item.ProductoId"
                    data-nombre="@item.Orden?.Estado">
                    <td>@(item.FechaGeneracion?.ToString("dd/MM/yyyy") ?? "Sin fecha")</td>
                    <td>@item.OrdenId</td>
                    <td>@item.Cantidad</td>
                    <td>@item.TiempoProduccion</td>
                    <td>@item.Estado</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <a href="#"
                               class="edit-button btn p-1"
                               data-bs-toggle="modal"
                               data-bs-target="#editarNuevo"
                               data-id-reporte="@item.ReporteId"
                               data-id-orden="@item.OrdenId"
                               data-id-producto="@item.ProductoId"
                               data-cantidad="@item.Cantidad"
                               data-tiempo-produccion="@item.TiempoProduccion"
                               data-estado="@item.Estado">
                                <img src="~/spanIconos/botonEditar.png" alt="Editar" class="icon icon-hover" width="24" height="24">
                            </a>

                            <a href="#" 
                               class="vista-button btn p-1"
                               data-bs-toggle="modal" 
                               data-bs-target="#vista"
                               data-id-reporte="@item.ReporteId"
                               data-id-orden="@item.OrdenId"
                               data-id-producto="@item.ProductoId"
                               data-cantidad="@item.Cantidad"
                               data-tiempo-produccion="@item.TiempoProduccion"
                               data-estado="@item.Estado">
                                <img src="~/spanIconos/botonVistaPrevia.png" alt="Vista" class="icon icon-hover" width="24" height="24">
                            </a>
                            <a href="#" class="eliminar-button btn p-1"
                               data-bs-toggle="modal"
                               data-bs-target="#eliminarModal"
                               data-id-reporte="@item.ReporteId">
                                <img src="~/spanIconos/botonEliminar.png" alt="Eliminar" class="icon icon-hover" width="24" height="24">
                            </a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
</div>

<!-- Modal Editar -->
<div class="modal fade poppins-font" id="editarNuevo" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-md">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #EAEAEA;">
                <h4 class="modal-title titulo-reporte" id="editarNuevoLabel">Editar Material</h4>
            </div>
            <div class="modal-body">
                <form asp-action="Edit" asp-controller="Reportes" method="post" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="ReporteId" id="editar-reporteid" required>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="editar-idOrden" class="form-label small">Id Orden</label>
                            <input type="text" name="OrdenId" id="editar-idOrden" class="form-control form-control-sm">
                        </div>
                        <div class="col-md-4">
                            <label for="editar-idProducto" class="form-label small">Id Producto</label>
                            <input type="text" name="ProductoId" id="editar-idProducto" class="form-control form-control-sm">
                        </div>
                        <div class="col-md-4">
                            <label for="editar-cantidad" class="form-label small">Cantidad</label>
                            <input type="text" name="Cantidad" id="editar-cantidad" class="form-control form-control-sm">
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-md-6">
                            <label for="editar-tiempo" class="form-label small">Tiempo</label>
                            <input type="text" name="TiempoProduccion" id="editar-tiempo" class="form-control form-control-sm">
                        </div>
                        <div class="col-md-6">
                            <label for="editar-Estado" class="form-label small">Estado</label>
                            <input type="text" name="Estado" id="editar-Estado" class="form-control form-control-sm">
                        </div>
                    </div>

                    <div class="modal-footer">
                        <div class="w-100 d-flex justify-content-between">
                            <button type="button" class="btn btn-primary btn-cancelar" data-bs-dismiss="modal">Cancelar</button>
                            <button type="submit" class="btn btn-primary btn-guardar">Guardar</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>



<!-- Modal Vista -->
<div class="modal fade poppins-font" id="vista" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-md">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #EAEAEA;">
                <h4 class="modal-title titulo-reporte" id="vistaLabel">Detalles del Reporte</h4>
            </div>
            <div class="modal-body">
                <form asp-action="Edit" asp-controller="Reportes" method="post" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="editar-idOrden" class="form-label small">Id Orden</label>
                            <p class="form-control-plaintext border-bottom pb-2" id="vista-idOrden"></p>

                        </div>
                        <div class="col-md-4">
                            <label for="editar-idProducto" class="form-label small">Id Producto</label>
                            <p class="form-control-plaintext border-bottom pb-2" id="vista-idProducto"></p>

                        </div>
                        <div class="col-md-4">
                            <label for="editar-cantidad" class="form-label small">Cantidad</label>
                            <p class="form-control-plaintext border-bottom pb-2" id="vista-cantidad"></p>
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-md-6">
                            <label for="editar-tiempo" class="form-label small">Tiempo</label>
                            <p class="form-control-plaintext border-bottom pb-2" id="vista-tiempo"></p>
                        </div>
                        <div class="col-md-6">
                            <label for="editar-Estado" class="form-label small">Estado</label>
                            <p class="form-control-plaintext border-bottom pb-2" id="vista-estado"></p>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <div class="w-100 d-flex justify-content-between">
                            <button type="button" class="btn btn-primary btn-cancelar" data-bs-dismiss="modal">Cancelar</button>
                            <button type="submit" class="btn btn-primary btn-guardar">Guardar</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal Eliminar -->
<div class="modal fade poppins-font" id="eliminarModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #EAEAEA;">
                <h4 class="modal-title titulo-material">¿Estás Seguro?</h4>
            </div>
            <div class="modal-body">
                <p class="text-center">Se eliminarán los datos del material completo. Esta acción es irreversible y no se podrán recuperar.</p>
            </div>
            <div class="modal-footer">
                <div class="w-100 d-flex justify-content-between">
                    <button type="button" class="btn btn-primary btn-cancelar" data-bs-dismiss="modal">Cancelar</button>
                    <form id="formEliminar" asp-action="Delete" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="reporteIdEliminar" name="id" />
                        <button type="submit" class="btn btn-primary btn-eliminar">Eliminar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Generar PDF -->
<div class="modal fade poppins-font" id="generar" tabindex="-1" aria-labelledby="generarLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #EAEAEA;">
                <h4 class="modal-title titulo-generar"> Generar Reporte de Producción</h4>
            </div>
            <div class="modal-body">
                <form id="formularioGenerarPdf">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="reportMonth" class="form-label">Seleccione el Mes</label>
                            <select class="form-select" id="reportMonth" name="mes" required>
                                <option value="" disabled selected>Seleccione...</option>
                                <option value="1">Enero</option>
                                <option value="2">Febrero</option>
                                <option value="3">Marzo</option>
                                <option value="4">Abril</option>
                                <option value="5">Mayo</option>
                                <option value="6">Junio</option>
                                <option value="7">Julio</option>
                                <option value="8">Agosto</option>
                                <option value="9">Septiembre</option>
                                <option value="10">Octubre</option>
                                <option value="11">Noviembre</option>
                                <option value="12">Diciembre</option>
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="reportYear" class="form-label">Seleccione el Año</label>
                            <input type="number" id="reportYear" class="form-control" name="year" min="2020" max="2030" value="2025" required>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <div class="w-100 d-flex justify-content-between">
                    <button type="button" class="btn btn-primary btn-cancelar" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary btn-generar-pdf">Generar PDF</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    const searchInput = document.getElementById('searchInput');
    const reportesFilas = Array.from(document.querySelectorAll('.reporte'));
    const maxFilas = 2;

    function mostrarFilasIniciales() {
        reportesFilas.forEach((fila, index) => {
            fila.style.display = index < maxFilas ? '' : 'none';
        });
    }

    // Filtrar según búsqueda

    function filtrarReporte() {
        const searchTerm = searchInput.value.toLowerCase();
        let resultados = 0;

        reportesFilas.forEach(producto => {
            const idOrden = producto.dataset.idOrden?.toLowerCase() || '';
            const idReporte = producto.dataset.idReporte?.toLowerCase() || '';
            const idProducto = producto.dataset.idProducto?.toLowerCase() || '';


            if (idOrden.includes(searchTerm) || idProducto.includes(searchTerm) || idReporte.includes(searchTerm)) {
                producto.style.display = '';
                resultados++;
            } else {
                producto.style.display = 'none';
            }
        });

        if (searchTerm === '') {
            mostrarFilasIniciales();
        }
    }

    window.addEventListener('DOMContentLoaded', mostrarFilasIniciales);
    searchInput.addEventListener('input', filtrarReporte);

    // MODAL EDITAR
    document.querySelectorAll('.edit-button').forEach(boton => {
        boton.addEventListener('click', () => {
            document.getElementById('editar-reporteid').value = boton.getAttribute('data-id-reporte');
            document.getElementById('editar-idOrden').value = boton.getAttribute('data-id-orden');
            document.getElementById('editar-idProducto').value = boton.getAttribute('data-id-producto');
            document.getElementById('editar-cantidad').value = boton.getAttribute('data-cantidad');
            document.getElementById('editar-tiempo').value = boton.getAttribute('data-tiempo-produccion');
            document.getElementById('editar-Estado').value = boton.getAttribute('data-estado');
        });
    });

    //MODAL VISTA
    document.addEventListener('DOMContentLoaded', function () {
        // Configurar todos los botones de vista
        document.querySelectorAll('.vista-button').forEach(button => {
            button.addEventListener('click', function () {
                // Obtener todos los atributos data
                const data = {
                    idReporte: this.getAttribute('data-id-reporte'),
                    idOrden: this.getAttribute('data-id-orden'),
                    idProducto: this.getAttribute('data-id-producto'),
                    cantidad: this.getAttribute('data-cantidad'),
                    tiempo: this.getAttribute('data-tiempo-produccion'),
                    estado: this.getAttribute('data-estado')
                };

                // Asignar valores a los elementos del modal
                document.getElementById('vista-idOrden').textContent = data.idOrden || 'N/A';
                document.getElementById('vista-idProducto').textContent = data.idProducto || 'N/A';
                document.getElementById('vista-cantidad').textContent = data.cantidad || 'N/A';
                document.getElementById('vista-tiempo').textContent = data.tiempo || '0';
                document.getElementById('vista-estado').textContent = data.estado || 'N/A';
            });
        });
    });

    // MODAL ELIMINAR
    document.addEventListener("DOMContentLoaded", function () {
        const eliminarModal = document.getElementById("eliminarModal");
        const materialIdInput = document.getElementById("reporteIdEliminar");

        eliminarModal.addEventListener("show.bs.modal", function (event) {
            const button = event.relatedTarget;
            const materialId = button.getAttribute("data-id");

            materialIdInput.value = materialId;
        });
    });

    // MODAL GENERARPDF

document.addEventListener('DOMContentLoaded', function() {
    // Seleccionar el botón Generar PDF del modal
    document.querySelector('.btn-generar-pdf').addEventListener('click', async (e) => {
        e.preventDefault();
        
        const mes = document.getElementById('reportMonth').value;
        const year = document.getElementById('reportYear').value;

        // Validación básica
        if (!mes || !year) {
            alert("Por favor, complete todos los campos.");
            return;
        }

        try {
            const response = await fetch(`/Reportes/GenerarPDF?mes=${mes}&year=${year}`);

            if (!response.ok) {
                const error = await response.text();
                throw new Error(error);
            }

            // Descargar el PDF
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `Reporte_${mes}_${year}.pdf`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            
            // Cerrar el modal después de la descarga
            bootstrap.Modal.getInstance(document.getElementById('generar')).hide();
        } catch (error) {
            console.error("Error:", error);
            alert(`Error al generar el reporte: ${error.message}`);
        }
    });
});

    //TARJETAS
             document.addEventListener('DOMContentLoaded', function() {
        fetch('/Reportes/GetData')
            .then(response => {
                if (!response.ok) throw new Error('Error en la red');
                return response.json();
            })
            .then(data => {
                console.log('Datos recibidos:', data); // Para depuración

                document.getElementById('ordenesEnProceso').textContent = data.ordenesEnProceso;
                document.getElementById('ordenesFinalizadas').textContent = data.ordenesFinalizadas;
                document.getElementById('ordenesPendientes').textContent = data.ordenesPendientes;
                document.getElementById('indiceRetrasos').textContent = data.indiceRetrasos;
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('ordenesEnProceso').textContent = "Error";
                document.getElementById('ordenesFinalizadas').textContent = "Error";
                document.getElementById('ordenesPendientes').textContent = "Error";
                document.getElementById('indiceRetrasos').textContent = "Error";
            });
    });

//GRAFICA DE BARRAS

document.addEventListener('DOMContentLoaded', function () {
    function generarAcronimo(nombre) {
        return nombre
            .split(' ')
            .map(palabra => palabra.charAt(0).toUpperCase())
            .join('');
    }

    fetch('/Reportes/GetDesempenoOrdenes')
        .then(response => response.json())
        .then(data => {
            const labels = data.map(item => generarAcronimo(item.producto));
            const tiempos = data.map(item => item.tiempoTotal);

            const ctx = document.getElementById('graficoAvance').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: ' Avance de Producción por Producto',
                        data: tiempos,
                        backgroundColor: '#FFA322',
                        borderColor: '#BD7004',
                        borderWidth: 0,
                        borderRadius: 4,        
                        borderSkipped: false 
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: ' Avance de Producción por Producto',
                            color: '#747474',
                            font: {
                                size: 14,
                                weight: '580'
                            },
                            padding: {
                                top: 10,
                                bottom: 20
                            }
                        },
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                title: function (tooltipItems) {
                                    const index = tooltipItems[0].dataIndex;
                                    return data[index].producto;
                                },
                                label: function(context) {
                                    return `Tiempo: ${context.parsed.y} hrs`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            display: false,
                            grid: {
                                display: false
                            }
                        },
                        x: {
                            display: false,
                            grid: {
                                display: false
                            }
                        }
                    },
                    layout: {
                        padding: 0
                    }
                } // Cierre correcto de options
            }); // Cierre correcto de new Chart
        })
        .catch(error => console.error('Error al obtener los datos:', error));
});

// GRAFICA DE DONA (Versión corregida)
document.addEventListener('DOMContentLoaded', function () {
    function generarAcronimo(nombre) {
        return nombre
            .split(' ')
            .map(palabra => palabra.charAt(0).toUpperCase())
            .join('');
    }

    fetch('/Reportes/ObtenerReporteEstadoOrdenes')
        .then(response => response.json())
        .then(data => {
            const labels = data.map(item => item.estado);
            const valores = data.map(item => item.cantidadOrdenes);

            const colores = [
                'rgba(75, 192, 192, 0.7)',   // Finalizada
                'rgba(255, 99, 132, 0.7)',   // Cancelada
                'rgba(255, 205, 86, 0.7)',    // En proceso
                'rgba(54, 162, 235, 0.7)'     // Pendiente
            ];

            const ctx = document.getElementById('graficoEstados').getContext('2d');
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Estado de Órdenes en Producción',
                        data: valores,
                        backgroundColor: colores,
                        borderColor: 'white',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Estado de Órdenes de Producción', // Título único
                            color: '#747474',
                            font: {
                                size: 14,
                                weight: '600' // Valor correcto para semibold
                            },
                            padding: {
                                top: 10,
                                bottom: 20
                            }
                        },
                        legend: {
                            position: 'right'
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return `${context.label}: ${context.parsed}`;
                                }
                            }
                        }
                    }
                }
            });
        })
        .catch(error => console.error('Error al obtener los datos:', error));
});


// GRAFICA DE TIEMPO PRODUCCION 
document.addEventListener('DOMContentLoaded', function () {
    function generarAcronimo(nombre) {
        return nombre
            .split(' ')
            .map(palabra => palabra.charAt(0).toUpperCase())
            .join('');
    }

    fetch('/Reportes/ObtenerReporteTiempoPromedio')
        .then(response => response.json())
        .then(data => {
            const labels = data.map(item => generarAcronimo(item.producto));
            const valores = data.map(item => item.tiempoPromedioHoras);

            const ctx = document.getElementById('graficoTiempo').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Tiempo Promedio (hrs)',
                        data: valores,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        fill: true,
                        tension: 0.3,
                        pointRadius: 4,
                        pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                        pointHoverRadius: 6
                    }]
                },
	options: {
    	responsive: true,
    	maintainAspectRatio: false,
   	 plugins: {
        	title: {  // Configuración ÚNICA del título (elimina la otra)
            	display: true,
            	text: 'Tiempos Promedio de Producción',
            	color: '#747474',
            	 font: {
                      size: 14,
                      weight: '600' // Valor correcto para semibold
                 },
                 padding: {
                        top: 10,
                        bottom: 20
                  }
        	},
        	legend: {
            	display: false
        	},
        	tooltip: {
            	enabled: true,
            	callbacks: {
                	title: function(context) {
                    	const index = context[0].dataIndex;
                    	return data[index].producto;
                	},
                	label: function(context) {
                    	return `Tiempo: ${context.parsed.y.toFixed(2)} hrs`;
                	}
            	}
        	}
    	},
    	scales: {
        	y: {
            	display: false,
            	grid: {
                	display: false
            	}
        	},
        	x: {
            	display: false,
            	grid: {
                	display: false
            	}
        	}
    	},
    	layout: {
        	padding: 0
    	}
	}
            	});
        	})
        	.catch(error => console.error('Error al obtener los datos:', error));
});



</script>